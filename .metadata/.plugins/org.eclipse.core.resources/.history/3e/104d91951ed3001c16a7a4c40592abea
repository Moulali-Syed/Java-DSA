package theory;

import java.util.Scanner;

public class MethodsDemo {

	public static int add() {

		Scanner sc = new Scanner(System.in);
		System.out.println("Enter a number one");
		int a = sc.nextInt();
		System.out.println("Enter a second number ");
		int b = sc.nextInt();
		return (a + b);
	}

	static String greet(String name) {
		return "hello " + name;
	}

	static void swap(int n1, int n2) {
		int temp = n1;
		n1 = n2;
		n2 = temp;
		System.out.println("the value of n1 is :" + n1 + "the value of n2 is : " + n2);
	}

	public static void main(String[] args) {

		int sum = add();
		System.out.println(sum);
		String greet = greet("Apple");
		System.out.println(greet);

		swap(2, 3);
	}

}

//In java we have only pass by value , no pass by reference

*********************************************************************************************

package theory;

public class ChangeValue {

	public static void main(String[] args) {
	
		
		int[] arr = {1,2,3,4,5,6};
		change(arr);

	}

	 static void change(int[] nums) {
		nums[0]=99;
		
	}

}

*********************************************************************************************


package theory;

public class Scope {

	public static void main(String[] args) {
		int num=10;
//		System.out.println(a1); not accessible
		{
		//int num =12;//cant be intialized again here but can be modifiable
		num=13;//already intialized outside block in same method cant intialiaze again but can change value
		
		
		int c=90;//values intialized in this block will remain in the block
		}
		//System.out.println(c);//cant be used here
		
		
		//scoping in for loop
		for(int i=0;i<4;i++) {
			System.out.println(i);
		}
		
		//anything which is initialised outside block can be used inside block
		//anything which is intialized inside block cannot be used outside block
	}
	
	public static void scopeVar(int a,int b) {
		int a1 =a;
		
	}
}


*********************************************************************************************

