package theory;

import java.util.Scanner;

public class MethodsDemo {

	public static int add() {

		Scanner sc = new Scanner(System.in);
		System.out.println("Enter a number one");
		int a = sc.nextInt();
		System.out.println("Enter a second number ");
		int b = sc.nextInt();
		return (a + b);
	}

	static String greet(String name) {
		return "hello " + name;
	}

	static void swap(int n1, int n2) {
		int temp = n1;
		n1 = n2;
		n2 = temp;
		System.out.println("the value of n1 is :" + n1 + "the value of n2 is : " + n2);
	}

	public static void main(String[] args) {

		int sum = add();
		System.out.println(sum);
		String greet = greet("Apple");
		System.out.println(greet);

		swap(2, 3);
	}

}

//In java we have only pass by value , no pass by reference

*********************************************************************************************

package theory;

public class ChangeValue {

	public static void main(String[] args) {
	
		
		int[] arr = {1,2,3,4,5,6};
		change(arr);

	}

	 static void change(int[] nums) {
		nums[0]=99;
		
	}

}

*********************************************************************************************


package theory;

public class Scope {

	public static void main(String[] args) {
		int num=10;
//		System.out.println(a1); not accessible
		{
		//int num =12;//cant be intialized again here but can be modifiable
		num=13;//already intialized outside block in same method cant intialiaze again but can change value
		
		
		int c=90;//values intialized in this block will remain in the block
		}
		//System.out.println(c);//cant be used here
		
		
		//scoping in for loop
		for(int i=0;i<4;i++) {
			System.out.println(i);
		}
		
		//anything which is initialised outside block can be used inside block
		//anything which is intialized inside block cannot be used outside block
	}
	
	public static void scopeVar(int a,int b) {
		int a1 =a;
		
	}
}


*********************************************************************************************
package theory;

public class Shadowing {
	static int num = 20;

	public static void main(String[] args) {
		// lower level overriding upper level is shadowing
		System.out.println(num);//20
		int num = 21;
		System.out.println(num);//21
	}

}
*********************************************************************************************
package theory;

import java.util.Arrays;

public class Varargs {

	public static void main(String[] args) {
		fun(2,3,4,5,56,6,7,7,0);
		
		multiple(2,2,123,4,2,3);

	}
	
	static void fun(int ...v) {
		System.out.println(Arrays.toString(v));
	}
	
	static void multiple(int a,int b,int ...z) {
		System.out.println();
	}

}


//varargs must come at end if there are more arguments

*********************************************************************************************
package theory;

public class MethodOverLoading {

	public static void main(String[] args) {

		fun(1);
		fun(1, 2);
	}

	// Method Overloading -  happens at compile time
	//arguments must be different
	static void fun(int a) {
		System.out.println(a);
	}

	static void fun(int a, int b) {
		System.out.println(a + " " + b);
	}

}




*********************************************************************************************
package theory;

import java.util.Scanner;

public class Questions {

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int n = in.nextInt();
		// System.out.println(isPrime(n));
		armstrong(n);
	}

	static boolean isPrime(int n) {
		if (n <= 1) {
			return false;
		}

		int c = 2;
		while (c * c <= n) {
			if (n % c == 0) {
				return false;
			}
			c++;
		}
		return c * c > n;
	}

	// armstrong numbers
	// 153 = 1^3 +5^3+3^3

	static void armstrong(int n) {
		int original = n;
		int res = 0;
		while (n > 0) {
			int rem = n % 10;
			res += rem * rem * rem;
			n = n / 10;
		}
		if (res == original) {
			System.out.println("Armstrong");
		} else {
			System.out.println("Not armstrong");
		}
	}

}

